@page "/AdminAccountsManager"
@inject UserManager UserManager
@inject NavigationManager Navigation
@using MiracleLandAS.Models
@using MiracleLandAS.Services

<div class="container mt-5">
    <h1 class="text-center">Accounts Management</h1>

    <div class="mb-4">
        <input type="text" class="form-control" placeholder="Search by username..." @bind="searchQuery" @oninput="(e) => FilterUsers(e.Value.ToString())" />
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredCustomers != null && filteredCustomers.Count > 0)
    {
        <div class="row">
            @foreach (var customer in filteredCustomers)
            {
                <div class="col-md-6 mb-4">
                    <div class="card">
                        <img src="@customer.Avt" alt="@customer.Username's avatar" class="card-img-top" style="max-height: 200px; object-fit: cover;" />
                        <div class="card-body">
                            <h5 class="card-title">@customer.Username</h5>
                            <p class="card-text"><strong>Email:</strong> @customer.Email</p>
                            <p class="card-text"><strong>Phone:</strong> @customer.Phone</p>
                            <p class="card-text"><strong>Address:</strong> @customer.Address</p>
                            <p class="card-text"><strong>Status:</strong> @(customer.IsActive ? "Active" : "Banned")</p>
                            @if (customer.IsActive)
                            {
                                <button class="btn btn-danger" @onclick="() => BanUser(customer.Uid)">Ban User</button>
                            }
                            else
                            {
                                <span class="badge bg-secondary">User Banned</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center" role="alert">
            No customers found.
        </div>
    }
</div>

@code {
    private List<GetUserList>? customers;
    private List<GetUserList>? filteredCustomers;
    private bool isLoading = true;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        isLoading = true;
        try
        {
            customers = await UserManager.GetCustomersAsync();
            filteredCustomers = customers;
        }
        catch (Exception ex)
        {
            // Handle exceptions (log or display error)
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterUsers(string searchQuery)
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers?.Where(c => c.Username.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task BanUser(Guid userId)
    {
        var result = await UserManager.BanUserAsync(userId);
        if (result)
        {
            await LoadCustomers();
        }
    }
}